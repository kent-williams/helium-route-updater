// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.12.4
// source: service/poc_mobile.proto

package poc_mobile

import (
	helium "github.com/thisisdevelopment/helium-route-updater/pkg/api/helium"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HeartbeatValidity int32

const (
	HeartbeatValidity_heartbeat_validity_valid                   HeartbeatValidity = 0
	HeartbeatValidity_heartbeat_validity_gateway_owner_not_found HeartbeatValidity = 1
	HeartbeatValidity_heartbeat_validity_heartbeat_outside_range HeartbeatValidity = 2
	HeartbeatValidity_heartbeat_validity_bad_cbsd_id             HeartbeatValidity = 3
	HeartbeatValidity_heartbeat_validity_not_operational         HeartbeatValidity = 4
)

// Enum value maps for HeartbeatValidity.
var (
	HeartbeatValidity_name = map[int32]string{
		0: "heartbeat_validity_valid",
		1: "heartbeat_validity_gateway_owner_not_found",
		2: "heartbeat_validity_heartbeat_outside_range",
		3: "heartbeat_validity_bad_cbsd_id",
		4: "heartbeat_validity_not_operational",
	}
	HeartbeatValidity_value = map[string]int32{
		"heartbeat_validity_valid":                   0,
		"heartbeat_validity_gateway_owner_not_found": 1,
		"heartbeat_validity_heartbeat_outside_range": 2,
		"heartbeat_validity_bad_cbsd_id":             3,
		"heartbeat_validity_not_operational":         4,
	}
)

func (x HeartbeatValidity) Enum() *HeartbeatValidity {
	p := new(HeartbeatValidity)
	*p = x
	return p
}

func (x HeartbeatValidity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HeartbeatValidity) Descriptor() protoreflect.EnumDescriptor {
	return file_service_poc_mobile_proto_enumTypes[0].Descriptor()
}

func (HeartbeatValidity) Type() protoreflect.EnumType {
	return &file_service_poc_mobile_proto_enumTypes[0]
}

func (x HeartbeatValidity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HeartbeatValidity.Descriptor instead.
func (HeartbeatValidity) EnumDescriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{0}
}

type SpeedtestAvgValidity int32

const (
	SpeedtestAvgValidity_speedtest_avg_validity_valid               SpeedtestAvgValidity = 0
	SpeedtestAvgValidity_speedtest_avg_validity_too_few_samples     SpeedtestAvgValidity = 1
	SpeedtestAvgValidity_speedtest_avg_validity_slow_download_speed SpeedtestAvgValidity = 2
	SpeedtestAvgValidity_speedtest_avg_validity_slow_upload_speed   SpeedtestAvgValidity = 3
	SpeedtestAvgValidity_speedtest_avg_validity_high_latency        SpeedtestAvgValidity = 4
)

// Enum value maps for SpeedtestAvgValidity.
var (
	SpeedtestAvgValidity_name = map[int32]string{
		0: "speedtest_avg_validity_valid",
		1: "speedtest_avg_validity_too_few_samples",
		2: "speedtest_avg_validity_slow_download_speed",
		3: "speedtest_avg_validity_slow_upload_speed",
		4: "speedtest_avg_validity_high_latency",
	}
	SpeedtestAvgValidity_value = map[string]int32{
		"speedtest_avg_validity_valid":               0,
		"speedtest_avg_validity_too_few_samples":     1,
		"speedtest_avg_validity_slow_download_speed": 2,
		"speedtest_avg_validity_slow_upload_speed":   3,
		"speedtest_avg_validity_high_latency":        4,
	}
)

func (x SpeedtestAvgValidity) Enum() *SpeedtestAvgValidity {
	p := new(SpeedtestAvgValidity)
	*p = x
	return p
}

func (x SpeedtestAvgValidity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpeedtestAvgValidity) Descriptor() protoreflect.EnumDescriptor {
	return file_service_poc_mobile_proto_enumTypes[1].Descriptor()
}

func (SpeedtestAvgValidity) Type() protoreflect.EnumType {
	return &file_service_poc_mobile_proto_enumTypes[1]
}

func (x SpeedtestAvgValidity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpeedtestAvgValidity.Descriptor instead.
func (SpeedtestAvgValidity) EnumDescriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{1}
}

type FileType int32

const (
	FileType_file_type_heartbeat FileType = 0
	FileType_file_type_speedtest FileType = 1
)

// Enum value maps for FileType.
var (
	FileType_name = map[int32]string{
		0: "file_type_heartbeat",
		1: "file_type_speedtest",
	}
	FileType_value = map[string]int32{
		"file_type_heartbeat": 0,
		"file_type_speedtest": 1,
	}
)

func (x FileType) Enum() *FileType {
	p := new(FileType)
	*p = x
	return p
}

func (x FileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileType) Descriptor() protoreflect.EnumDescriptor {
	return file_service_poc_mobile_proto_enumTypes[2].Descriptor()
}

func (FileType) Type() protoreflect.EnumType {
	return &file_service_poc_mobile_proto_enumTypes[2]
}

func (x FileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileType.Descriptor instead.
func (FileType) EnumDescriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{2}
}

type CellType int32

const (
	CellType_nova436h        CellType = 0
	CellType_nova430i        CellType = 1
	CellType_neutrino430     CellType = 2
	CellType_sercomm_indoor  CellType = 3
	CellType_sercomm_outdoor CellType = 4
)

// Enum value maps for CellType.
var (
	CellType_name = map[int32]string{
		0: "nova436h",
		1: "nova430i",
		2: "neutrino430",
		3: "sercomm_indoor",
		4: "sercomm_outdoor",
	}
	CellType_value = map[string]int32{
		"nova436h":        0,
		"nova430i":        1,
		"neutrino430":     2,
		"sercomm_indoor":  3,
		"sercomm_outdoor": 4,
	}
)

func (x CellType) Enum() *CellType {
	p := new(CellType)
	*p = x
	return p
}

func (x CellType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CellType) Descriptor() protoreflect.EnumDescriptor {
	return file_service_poc_mobile_proto_enumTypes[3].Descriptor()
}

func (CellType) Type() protoreflect.EnumType {
	return &file_service_poc_mobile_proto_enumTypes[3]
}

func (x CellType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CellType.Descriptor instead.
func (CellType) EnumDescriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{3}
}

type DataTransferRadioAccessTechnology int32

const (
	DataTransferRadioAccessTechnology_UTRAN          DataTransferRadioAccessTechnology = 0
	DataTransferRadioAccessTechnology_GERAN          DataTransferRadioAccessTechnology = 1
	DataTransferRadioAccessTechnology_WLAN           DataTransferRadioAccessTechnology = 2
	DataTransferRadioAccessTechnology_GAN            DataTransferRadioAccessTechnology = 3
	DataTransferRadioAccessTechnology_HSPA_Evolution DataTransferRadioAccessTechnology = 4
	DataTransferRadioAccessTechnology_EUTRAN         DataTransferRadioAccessTechnology = 5
)

// Enum value maps for DataTransferRadioAccessTechnology.
var (
	DataTransferRadioAccessTechnology_name = map[int32]string{
		0: "UTRAN",
		1: "GERAN",
		2: "WLAN",
		3: "GAN",
		4: "HSPA_Evolution",
		5: "EUTRAN",
	}
	DataTransferRadioAccessTechnology_value = map[string]int32{
		"UTRAN":          0,
		"GERAN":          1,
		"WLAN":           2,
		"GAN":            3,
		"HSPA_Evolution": 4,
		"EUTRAN":         5,
	}
)

func (x DataTransferRadioAccessTechnology) Enum() *DataTransferRadioAccessTechnology {
	p := new(DataTransferRadioAccessTechnology)
	*p = x
	return p
}

func (x DataTransferRadioAccessTechnology) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataTransferRadioAccessTechnology) Descriptor() protoreflect.EnumDescriptor {
	return file_service_poc_mobile_proto_enumTypes[4].Descriptor()
}

func (DataTransferRadioAccessTechnology) Type() protoreflect.EnumType {
	return &file_service_poc_mobile_proto_enumTypes[4]
}

func (x DataTransferRadioAccessTechnology) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataTransferRadioAccessTechnology.Descriptor instead.
func (DataTransferRadioAccessTechnology) EnumDescriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{4}
}

type SpeedtestReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubKey []byte `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	Serial string `protobuf:"bytes,2,opt,name=serial,proto3" json:"serial,omitempty"`
	/// Timestamp of speedtest test in seconds from unix epoch
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	/// Measured upload speed in bytes/sec. <value>*8/10E5 = Mbps
	UploadSpeed uint64 `protobuf:"varint,4,opt,name=upload_speed,json=uploadSpeed,proto3" json:"upload_speed,omitempty"`
	/// Measured download speed in bytes/sec. <value>*8/10E5 = Mbps
	DownloadSpeed uint64 `protobuf:"varint,5,opt,name=download_speed,json=downloadSpeed,proto3" json:"download_speed,omitempty"`
	/// Measured latency in milliseconds
	Latency   uint32 `protobuf:"varint,6,opt,name=latency,proto3" json:"latency,omitempty"`
	Signature []byte `protobuf:"bytes,7,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SpeedtestReqV1) Reset() {
	*x = SpeedtestReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeedtestReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedtestReqV1) ProtoMessage() {}

func (x *SpeedtestReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedtestReqV1.ProtoReflect.Descriptor instead.
func (*SpeedtestReqV1) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{0}
}

func (x *SpeedtestReqV1) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *SpeedtestReqV1) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

func (x *SpeedtestReqV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SpeedtestReqV1) GetUploadSpeed() uint64 {
	if x != nil {
		return x.UploadSpeed
	}
	return 0
}

func (x *SpeedtestReqV1) GetDownloadSpeed() uint64 {
	if x != nil {
		return x.DownloadSpeed
	}
	return 0
}

func (x *SpeedtestReqV1) GetLatency() uint32 {
	if x != nil {
		return x.Latency
	}
	return 0
}

func (x *SpeedtestReqV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type SpeedtestRespV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SpeedtestRespV1) Reset() {
	*x = SpeedtestRespV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeedtestRespV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedtestRespV1) ProtoMessage() {}

func (x *SpeedtestRespV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedtestRespV1.ProtoReflect.Descriptor instead.
func (*SpeedtestRespV1) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{1}
}

func (x *SpeedtestRespV1) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// speedtest report output by ingestor, tagged with received_timestamp
type SpeedtestIngestReportV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// timestamp in milliseconds since unix epoch
	ReceivedTimestamp uint64          `protobuf:"varint,1,opt,name=received_timestamp,json=receivedTimestamp,proto3" json:"received_timestamp,omitempty"`
	Report            *SpeedtestReqV1 `protobuf:"bytes,2,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *SpeedtestIngestReportV1) Reset() {
	*x = SpeedtestIngestReportV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeedtestIngestReportV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedtestIngestReportV1) ProtoMessage() {}

func (x *SpeedtestIngestReportV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedtestIngestReportV1.ProtoReflect.Descriptor instead.
func (*SpeedtestIngestReportV1) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{2}
}

func (x *SpeedtestIngestReportV1) GetReceivedTimestamp() uint64 {
	if x != nil {
		return x.ReceivedTimestamp
	}
	return 0
}

func (x *SpeedtestIngestReportV1) GetReport() *SpeedtestReqV1 {
	if x != nil {
		return x.Report
	}
	return nil
}

type CellHeartbeatReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Public key of the hotspot
	PubKey      []byte `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	HotspotType string `protobuf:"bytes,2,opt,name=hotspot_type,json=hotspotType,proto3" json:"hotspot_type,omitempty"`
	CellId      uint32 `protobuf:"varint,3,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
	// Timestamp of heartbeat in seconds from unix epoch
	Timestamp     uint64  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Lat           float64 `protobuf:"fixed64,5,opt,name=lat,proto3" json:"lat,omitempty"`
	Lon           float64 `protobuf:"fixed64,6,opt,name=lon,proto3" json:"lon,omitempty"`
	OperationMode bool    `protobuf:"varint,7,opt,name=operation_mode,json=operationMode,proto3" json:"operation_mode,omitempty"`
	CbsdCategory  string  `protobuf:"bytes,8,opt,name=cbsd_category,json=cbsdCategory,proto3" json:"cbsd_category,omitempty"`
	CbsdId        string  `protobuf:"bytes,9,opt,name=cbsd_id,json=cbsdId,proto3" json:"cbsd_id,omitempty"`
	Signature     []byte  `protobuf:"bytes,10,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *CellHeartbeatReqV1) Reset() {
	*x = CellHeartbeatReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellHeartbeatReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellHeartbeatReqV1) ProtoMessage() {}

func (x *CellHeartbeatReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellHeartbeatReqV1.ProtoReflect.Descriptor instead.
func (*CellHeartbeatReqV1) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{3}
}

func (x *CellHeartbeatReqV1) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *CellHeartbeatReqV1) GetHotspotType() string {
	if x != nil {
		return x.HotspotType
	}
	return ""
}

func (x *CellHeartbeatReqV1) GetCellId() uint32 {
	if x != nil {
		return x.CellId
	}
	return 0
}

func (x *CellHeartbeatReqV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *CellHeartbeatReqV1) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *CellHeartbeatReqV1) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *CellHeartbeatReqV1) GetOperationMode() bool {
	if x != nil {
		return x.OperationMode
	}
	return false
}

func (x *CellHeartbeatReqV1) GetCbsdCategory() string {
	if x != nil {
		return x.CbsdCategory
	}
	return ""
}

func (x *CellHeartbeatReqV1) GetCbsdId() string {
	if x != nil {
		return x.CbsdId
	}
	return ""
}

func (x *CellHeartbeatReqV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type CellHeartbeatRespV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CellHeartbeatRespV1) Reset() {
	*x = CellHeartbeatRespV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellHeartbeatRespV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellHeartbeatRespV1) ProtoMessage() {}

func (x *CellHeartbeatRespV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellHeartbeatRespV1.ProtoReflect.Descriptor instead.
func (*CellHeartbeatRespV1) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{4}
}

func (x *CellHeartbeatRespV1) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// cell heartbeat report output by ingestor, tagged with received_timestamp
type CellHeartbeatIngestReportV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// timestamp in millisconds since unix epoch
	ReceivedTimestamp uint64              `protobuf:"varint,1,opt,name=received_timestamp,json=receivedTimestamp,proto3" json:"received_timestamp,omitempty"`
	Report            *CellHeartbeatReqV1 `protobuf:"bytes,2,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *CellHeartbeatIngestReportV1) Reset() {
	*x = CellHeartbeatIngestReportV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellHeartbeatIngestReportV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellHeartbeatIngestReportV1) ProtoMessage() {}

func (x *CellHeartbeatIngestReportV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellHeartbeatIngestReportV1.ProtoReflect.Descriptor instead.
func (*CellHeartbeatIngestReportV1) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{5}
}

func (x *CellHeartbeatIngestReportV1) GetReceivedTimestamp() uint64 {
	if x != nil {
		return x.ReceivedTimestamp
	}
	return 0
}

func (x *CellHeartbeatIngestReportV1) GetReport() *CellHeartbeatReqV1 {
	if x != nil {
		return x.Report
	}
	return nil
}

// mapper attach report output by ingestor, tagged with received_timestamp
type MapperAttachIngestReportV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// timestamp in millisconds since unix epoch
	ReceivedTimestamp uint64               `protobuf:"varint,1,opt,name=received_timestamp,json=receivedTimestamp,proto3" json:"received_timestamp,omitempty"`
	Report            *helium.MapperAttach `protobuf:"bytes,2,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *MapperAttachIngestReportV1) Reset() {
	*x = MapperAttachIngestReportV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapperAttachIngestReportV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapperAttachIngestReportV1) ProtoMessage() {}

func (x *MapperAttachIngestReportV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapperAttachIngestReportV1.ProtoReflect.Descriptor instead.
func (*MapperAttachIngestReportV1) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{6}
}

func (x *MapperAttachIngestReportV1) GetReceivedTimestamp() uint64 {
	if x != nil {
		return x.ReceivedTimestamp
	}
	return 0
}

func (x *MapperAttachIngestReportV1) GetReport() *helium.MapperAttach {
	if x != nil {
		return x.Report
	}
	return nil
}

type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	FileType  FileType `protobuf:"varint,2,opt,name=file_type,json=fileType,proto3,enum=helium.poc_mobile.FileType" json:"file_type,omitempty"`
	Timestamp uint64   `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Size      uint64   `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{7}
}

func (x *FileInfo) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FileInfo) GetFileType() FileType {
	if x != nil {
		return x.FileType
	}
	return FileType_file_type_heartbeat
}

func (x *FileInfo) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *FileInfo) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ProcessedFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files []*FileInfo `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *ProcessedFiles) Reset() {
	*x = ProcessedFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessedFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessedFiles) ProtoMessage() {}

func (x *ProcessedFiles) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessedFiles.ProtoReflect.Descriptor instead.
func (*ProcessedFiles) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{8}
}

func (x *ProcessedFiles) GetFiles() []*FileInfo {
	if x != nil {
		return x.Files
	}
	return nil
}

type Heartbeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CbsdId           string            `protobuf:"bytes,1,opt,name=cbsd_id,json=cbsdId,proto3" json:"cbsd_id,omitempty"`
	PubKey           []byte            `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	RewardMultiplier float32           `protobuf:"fixed32,3,opt,name=reward_multiplier,json=rewardMultiplier,proto3" json:"reward_multiplier,omitempty"`
	Timestamp        uint64            `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	CellType         CellType          `protobuf:"varint,5,opt,name=cell_type,json=cellType,proto3,enum=helium.poc_mobile.CellType" json:"cell_type,omitempty"`
	Validity         HeartbeatValidity `protobuf:"varint,6,opt,name=validity,proto3,enum=helium.poc_mobile.HeartbeatValidity" json:"validity,omitempty"`
}

func (x *Heartbeat) Reset() {
	*x = Heartbeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Heartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartbeat) ProtoMessage() {}

func (x *Heartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartbeat.ProtoReflect.Descriptor instead.
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{9}
}

func (x *Heartbeat) GetCbsdId() string {
	if x != nil {
		return x.CbsdId
	}
	return ""
}

func (x *Heartbeat) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *Heartbeat) GetRewardMultiplier() float32 {
	if x != nil {
		return x.RewardMultiplier
	}
	return 0
}

func (x *Heartbeat) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Heartbeat) GetCellType() CellType {
	if x != nil {
		return x.CellType
	}
	return CellType_nova436h
}

func (x *Heartbeat) GetValidity() HeartbeatValidity {
	if x != nil {
		return x.Validity
	}
	return HeartbeatValidity_heartbeat_validity_valid
}

type SpeedtestAvg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubKey []byte `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	/// bytes/sec
	UploadSpeedAvgBps uint64 `protobuf:"varint,2,opt,name=upload_speed_avg_bps,json=uploadSpeedAvgBps,proto3" json:"upload_speed_avg_bps,omitempty"`
	/// bytes/sec
	DownloadSpeedAvgBps uint64               `protobuf:"varint,3,opt,name=download_speed_avg_bps,json=downloadSpeedAvgBps,proto3" json:"download_speed_avg_bps,omitempty"`
	LatencyAvgMs        uint32               `protobuf:"varint,4,opt,name=latency_avg_ms,json=latencyAvgMs,proto3" json:"latency_avg_ms,omitempty"`
	Validity            SpeedtestAvgValidity `protobuf:"varint,5,opt,name=validity,proto3,enum=helium.poc_mobile.SpeedtestAvgValidity" json:"validity,omitempty"`
	Speedtests          []*Speedtest         `protobuf:"bytes,6,rep,name=speedtests,proto3" json:"speedtests,omitempty"`
	/// Unix timestamp (seconds since 1970) of when the average was calculated
	Timestamp        uint64  `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	RewardMultiplier float32 `protobuf:"fixed32,8,opt,name=reward_multiplier,json=rewardMultiplier,proto3" json:"reward_multiplier,omitempty"`
}

func (x *SpeedtestAvg) Reset() {
	*x = SpeedtestAvg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeedtestAvg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedtestAvg) ProtoMessage() {}

func (x *SpeedtestAvg) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedtestAvg.ProtoReflect.Descriptor instead.
func (*SpeedtestAvg) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{10}
}

func (x *SpeedtestAvg) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *SpeedtestAvg) GetUploadSpeedAvgBps() uint64 {
	if x != nil {
		return x.UploadSpeedAvgBps
	}
	return 0
}

func (x *SpeedtestAvg) GetDownloadSpeedAvgBps() uint64 {
	if x != nil {
		return x.DownloadSpeedAvgBps
	}
	return 0
}

func (x *SpeedtestAvg) GetLatencyAvgMs() uint32 {
	if x != nil {
		return x.LatencyAvgMs
	}
	return 0
}

func (x *SpeedtestAvg) GetValidity() SpeedtestAvgValidity {
	if x != nil {
		return x.Validity
	}
	return SpeedtestAvgValidity_speedtest_avg_validity_valid
}

func (x *SpeedtestAvg) GetSpeedtests() []*Speedtest {
	if x != nil {
		return x.Speedtests
	}
	return nil
}

func (x *SpeedtestAvg) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SpeedtestAvg) GetRewardMultiplier() float32 {
	if x != nil {
		return x.RewardMultiplier
	}
	return 0
}

type Speedtest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadSpeedBps   uint64 `protobuf:"varint,1,opt,name=upload_speed_bps,json=uploadSpeedBps,proto3" json:"upload_speed_bps,omitempty"`
	DownloadSpeedBps uint64 `protobuf:"varint,2,opt,name=download_speed_bps,json=downloadSpeedBps,proto3" json:"download_speed_bps,omitempty"`
	LatencyMs        uint32 `protobuf:"varint,3,opt,name=latency_ms,json=latencyMs,proto3" json:"latency_ms,omitempty"`
	Timestamp        uint64 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Speedtest) Reset() {
	*x = Speedtest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Speedtest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Speedtest) ProtoMessage() {}

func (x *Speedtest) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Speedtest.ProtoReflect.Descriptor instead.
func (*Speedtest) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{11}
}

func (x *Speedtest) GetUploadSpeedBps() uint64 {
	if x != nil {
		return x.UploadSpeedBps
	}
	return 0
}

func (x *Speedtest) GetDownloadSpeedBps() uint64 {
	if x != nil {
		return x.DownloadSpeedBps
	}
	return 0
}

func (x *Speedtest) GetLatencyMs() uint32 {
	if x != nil {
		return x.LatencyMs
	}
	return 0
}

func (x *Speedtest) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type RadioRewardShare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Public key of the owner of the radio
	OwnerKey []byte `protobuf:"bytes,1,opt,name=owner_key,json=ownerKey,proto3" json:"owner_key,omitempty"`
	/// Public key of the hotspot of the radio
	HotspotKey []byte `protobuf:"bytes,2,opt,name=hotspot_key,json=hotspotKey,proto3" json:"hotspot_key,omitempty"`
	/// cbsd Id of the radio
	CbsdId string `protobuf:"bytes,3,opt,name=cbsd_id,json=cbsdId,proto3" json:"cbsd_id,omitempty"`
	/// Amount rewarded to the owner of the radio
	Amount uint64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	/// Unix timestamp in seconds of the start of the reward period
	StartEpoch uint64 `protobuf:"varint,5,opt,name=start_epoch,json=startEpoch,proto3" json:"start_epoch,omitempty"`
	/// Unix timestamp in seconds of the end of the reward period
	EndEpoch uint64 `protobuf:"varint,6,opt,name=end_epoch,json=endEpoch,proto3" json:"end_epoch,omitempty"`
}

func (x *RadioRewardShare) Reset() {
	*x = RadioRewardShare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadioRewardShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadioRewardShare) ProtoMessage() {}

func (x *RadioRewardShare) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadioRewardShare.ProtoReflect.Descriptor instead.
func (*RadioRewardShare) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{12}
}

func (x *RadioRewardShare) GetOwnerKey() []byte {
	if x != nil {
		return x.OwnerKey
	}
	return nil
}

func (x *RadioRewardShare) GetHotspotKey() []byte {
	if x != nil {
		return x.HotspotKey
	}
	return nil
}

func (x *RadioRewardShare) GetCbsdId() string {
	if x != nil {
		return x.CbsdId
	}
	return ""
}

func (x *RadioRewardShare) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *RadioRewardShare) GetStartEpoch() uint64 {
	if x != nil {
		return x.StartEpoch
	}
	return 0
}

func (x *RadioRewardShare) GetEndEpoch() uint64 {
	if x != nil {
		return x.EndEpoch
	}
	return 0
}

type DataTransferSessionReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubKey                []byte                            `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	UploadBytes           uint64                            `protobuf:"varint,2,opt,name=upload_bytes,json=uploadBytes,proto3" json:"upload_bytes,omitempty"`
	DownloadBytes         uint64                            `protobuf:"varint,3,opt,name=download_bytes,json=downloadBytes,proto3" json:"download_bytes,omitempty"`
	RadioAccessTechnology DataTransferRadioAccessTechnology `protobuf:"varint,4,opt,name=radio_access_technology,json=radioAccessTechnology,proto3,enum=helium.poc_mobile.DataTransferRadioAccessTechnology" json:"radio_access_technology,omitempty"`
	SessionId             string                            `protobuf:"bytes,5,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Payer                 []byte                            `protobuf:"bytes,6,opt,name=payer,proto3" json:"payer,omitempty"`
	ImsiHash              []byte                            `protobuf:"bytes,7,opt,name=imsi_hash,json=imsiHash,proto3" json:"imsi_hash,omitempty"`
	// Timestamp in seconds since the epoch
	Timestamp uint64 `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature []byte `protobuf:"bytes,9,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *DataTransferSessionReqV1) Reset() {
	*x = DataTransferSessionReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataTransferSessionReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataTransferSessionReqV1) ProtoMessage() {}

func (x *DataTransferSessionReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataTransferSessionReqV1.ProtoReflect.Descriptor instead.
func (*DataTransferSessionReqV1) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{13}
}

func (x *DataTransferSessionReqV1) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *DataTransferSessionReqV1) GetUploadBytes() uint64 {
	if x != nil {
		return x.UploadBytes
	}
	return 0
}

func (x *DataTransferSessionReqV1) GetDownloadBytes() uint64 {
	if x != nil {
		return x.DownloadBytes
	}
	return 0
}

func (x *DataTransferSessionReqV1) GetRadioAccessTechnology() DataTransferRadioAccessTechnology {
	if x != nil {
		return x.RadioAccessTechnology
	}
	return DataTransferRadioAccessTechnology_UTRAN
}

func (x *DataTransferSessionReqV1) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *DataTransferSessionReqV1) GetPayer() []byte {
	if x != nil {
		return x.Payer
	}
	return nil
}

func (x *DataTransferSessionReqV1) GetImsiHash() []byte {
	if x != nil {
		return x.ImsiHash
	}
	return nil
}

func (x *DataTransferSessionReqV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DataTransferSessionReqV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type DataTransferSessionRespV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DataTransferSessionRespV1) Reset() {
	*x = DataTransferSessionRespV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataTransferSessionRespV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataTransferSessionRespV1) ProtoMessage() {}

func (x *DataTransferSessionRespV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataTransferSessionRespV1.ProtoReflect.Descriptor instead.
func (*DataTransferSessionRespV1) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{14}
}

func (x *DataTransferSessionRespV1) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DataTransferSessionIngestReportV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// timestamp in milliseconds since unix epoch
	ReceivedTimestamp uint64                    `protobuf:"varint,1,opt,name=received_timestamp,json=receivedTimestamp,proto3" json:"received_timestamp,omitempty"`
	Report            *DataTransferSessionReqV1 `protobuf:"bytes,2,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *DataTransferSessionIngestReportV1) Reset() {
	*x = DataTransferSessionIngestReportV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataTransferSessionIngestReportV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataTransferSessionIngestReportV1) ProtoMessage() {}

func (x *DataTransferSessionIngestReportV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataTransferSessionIngestReportV1.ProtoReflect.Descriptor instead.
func (*DataTransferSessionIngestReportV1) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{15}
}

func (x *DataTransferSessionIngestReportV1) GetReceivedTimestamp() uint64 {
	if x != nil {
		return x.ReceivedTimestamp
	}
	return 0
}

func (x *DataTransferSessionIngestReportV1) GetReport() *DataTransferSessionReqV1 {
	if x != nil {
		return x.Report
	}
	return nil
}

var File_service_poc_mobile_proto protoreflect.FileDescriptor

var file_service_poc_mobile_proto_rawDesc = []byte{
	0x0a, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6f, 0x63, 0x5f, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x68, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x1a, 0x0c, 0x6d,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe3, 0x01, 0x0a, 0x10,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x21, 0x0a, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x22, 0x23, 0x0a, 0x11, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x1a, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x76, 0x31, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x3b, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f,
	0x63, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x22, 0xb1, 0x02, 0x0a, 0x15, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75,
	0x62, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x6f, 0x74, 0x73, 0x70, 0x6f, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x6f, 0x74, 0x73,
	0x70, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c,
	0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x62, 0x73,
	0x64, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x62, 0x73, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x62, 0x73, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x62, 0x73, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x28, 0x0a, 0x16, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x68, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x92, 0x01, 0x0a, 0x1f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x5f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x76, 0x31, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x40, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x52, 0x06, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x22, 0x7e, 0x0a, 0x1e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x76, 0x31, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x6d,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x52, 0x06, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x22, 0x45, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63,
	0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x86, 0x02, 0x0a, 0x09, 0x68, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x62, 0x73, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x62, 0x73, 0x64, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x39, 0x0a, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x70, 0x6f, 0x63, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41,
	0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x2e, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x22, 0x84, 0x03, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x61, 0x76, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x14,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x61, 0x76, 0x67,
	0x5f, 0x62, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x41, 0x76, 0x67, 0x42, 0x70, 0x73, 0x12, 0x33, 0x0a,
	0x16, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f,
	0x61, 0x76, 0x67, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x41, 0x76, 0x67, 0x42,
	0x70, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x61, 0x76,
	0x67, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x41, 0x76, 0x67, 0x4d, 0x73, 0x12, 0x45, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x68, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12,
	0x3c, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63,
	0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73,
	0x74, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2b, 0x0a, 0x11, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x22, 0xa0, 0x01, 0x0a, 0x09, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x42, 0x70, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x42, 0x70, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xc1, 0x01, 0x0a, 0x12,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x68, 0x6f, 0x74, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x68, 0x6f, 0x74, 0x73, 0x70, 0x6f, 0x74, 0x4b, 0x65, 0x79,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x62, 0x73, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x62, 0x73, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x22,
	0x81, 0x03, 0x0a, 0x1c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x70, 0x0a, 0x17, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f,
	0x63, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x15,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x65, 0x63, 0x68, 0x6e,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d,
	0x73, 0x69, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x69,
	0x6d, 0x73, 0x69, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x22, 0x2f, 0x0a, 0x1d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x5f, 0x76, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x26, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x31, 0x12,
	0x2d, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x47,
	0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x52,
	0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2a, 0xde, 0x01, 0x0a, 0x12, 0x68, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x1c,
	0x0a, 0x18, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a,
	0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x01, 0x12, 0x2e, 0x0a, 0x2a,
	0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x6f, 0x75, 0x74,
	0x73, 0x69, 0x64, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e,
	0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x5f, 0x62, 0x61, 0x64, 0x5f, 0x63, 0x62, 0x73, 0x64, 0x5f, 0x69, 0x64, 0x10, 0x03,
	0x12, 0x26, 0x0a, 0x22, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x10, 0x04, 0x2a, 0xed, 0x01, 0x0a, 0x16, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x1c, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x61, 0x76, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f,
	0x74, 0x6f, 0x6f, 0x5f, 0x66, 0x65, 0x77, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x10,
	0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61,
	0x76, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x6c, 0x6f, 0x77,
	0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x10,
	0x02, 0x12, 0x2c, 0x0a, 0x28, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61,
	0x76, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x6c, 0x6f, 0x77,
	0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x10, 0x03, 0x12,
	0x27, 0x0a, 0x23, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x76, 0x67,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x6c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x10, 0x04, 0x2a, 0x3d, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x74, 0x65, 0x73, 0x74, 0x10, 0x01, 0x2a, 0x61, 0x0a, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x6e, 0x6f, 0x76, 0x61, 0x34, 0x33, 0x36, 0x68,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x6e, 0x6f, 0x76, 0x61, 0x34, 0x33, 0x30, 0x69, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x69, 0x6e, 0x6f, 0x34, 0x33, 0x30, 0x10,
	0x02, 0x12, 0x12, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x5f, 0x69, 0x6e, 0x64,
	0x6f, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d,
	0x5f, 0x6f, 0x75, 0x74, 0x64, 0x6f, 0x6f, 0x72, 0x10, 0x04, 0x2a, 0x70, 0x0a, 0x25, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x54, 0x52, 0x41, 0x4e, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x47, 0x45, 0x52, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x4c, 0x41,
	0x4e, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x41, 0x4e, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e,
	0x48, 0x53, 0x50, 0x41, 0x5f, 0x45, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x04,
	0x12, 0x0a, 0x0a, 0x06, 0x45, 0x55, 0x54, 0x52, 0x41, 0x4e, 0x10, 0x05, 0x32, 0xdd, 0x02, 0x0a,
	0x0a, 0x70, 0x6f, 0x63, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x5d, 0x0a, 0x10, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x12,
	0x23, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x71, 0x5f, 0x76, 0x31, 0x1a, 0x24, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f,
	0x63, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x12, 0x6c, 0x0a, 0x15, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x12, 0x28, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63,
	0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x68, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x1a, 0x29, 0x2e,
	0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x12, 0x81, 0x01, 0x0a, 0x1c, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x2e, 0x68, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x1a, 0x30, 0x2e, 0x68, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_poc_mobile_proto_rawDescOnce sync.Once
	file_service_poc_mobile_proto_rawDescData = file_service_poc_mobile_proto_rawDesc
)

func file_service_poc_mobile_proto_rawDescGZIP() []byte {
	file_service_poc_mobile_proto_rawDescOnce.Do(func() {
		file_service_poc_mobile_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_poc_mobile_proto_rawDescData)
	})
	return file_service_poc_mobile_proto_rawDescData
}

var file_service_poc_mobile_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_service_poc_mobile_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_service_poc_mobile_proto_goTypes = []interface{}{
	(HeartbeatValidity)(0),                    // 0: helium.poc_mobile.heartbeat_validity
	(SpeedtestAvgValidity)(0),                 // 1: helium.poc_mobile.speedtest_avg_validity
	(FileType)(0),                             // 2: helium.poc_mobile.file_type
	(CellType)(0),                             // 3: helium.poc_mobile.cell_type
	(DataTransferRadioAccessTechnology)(0),    // 4: helium.poc_mobile.data_transfer_radio_access_technology
	(*SpeedtestReqV1)(nil),                    // 5: helium.poc_mobile.speedtest_req_v1
	(*SpeedtestRespV1)(nil),                   // 6: helium.poc_mobile.speedtest_resp_v1
	(*SpeedtestIngestReportV1)(nil),           // 7: helium.poc_mobile.speedtest_ingest_report_v1
	(*CellHeartbeatReqV1)(nil),                // 8: helium.poc_mobile.cell_heartbeat_req_v1
	(*CellHeartbeatRespV1)(nil),               // 9: helium.poc_mobile.cell_heartbeat_resp_v1
	(*CellHeartbeatIngestReportV1)(nil),       // 10: helium.poc_mobile.cell_heartbeat_ingest_report_v1
	(*MapperAttachIngestReportV1)(nil),        // 11: helium.poc_mobile.mapper_attach_ingest_report_v1
	(*FileInfo)(nil),                          // 12: helium.poc_mobile.file_info
	(*ProcessedFiles)(nil),                    // 13: helium.poc_mobile.processed_files
	(*Heartbeat)(nil),                         // 14: helium.poc_mobile.heartbeat
	(*SpeedtestAvg)(nil),                      // 15: helium.poc_mobile.speedtest_avg
	(*Speedtest)(nil),                         // 16: helium.poc_mobile.speedtest
	(*RadioRewardShare)(nil),                  // 17: helium.poc_mobile.radio_reward_share
	(*DataTransferSessionReqV1)(nil),          // 18: helium.poc_mobile.data_transfer_session_req_v1
	(*DataTransferSessionRespV1)(nil),         // 19: helium.poc_mobile.data_transfer_session_resp_v1
	(*DataTransferSessionIngestReportV1)(nil), // 20: helium.poc_mobile.data_transfer_session_ingest_report_v1
	(*helium.MapperAttach)(nil),               // 21: helium.mapper_attach
}
var file_service_poc_mobile_proto_depIdxs = []int32{
	5,  // 0: helium.poc_mobile.speedtest_ingest_report_v1.report:type_name -> helium.poc_mobile.speedtest_req_v1
	8,  // 1: helium.poc_mobile.cell_heartbeat_ingest_report_v1.report:type_name -> helium.poc_mobile.cell_heartbeat_req_v1
	21, // 2: helium.poc_mobile.mapper_attach_ingest_report_v1.report:type_name -> helium.mapper_attach
	2,  // 3: helium.poc_mobile.file_info.file_type:type_name -> helium.poc_mobile.file_type
	12, // 4: helium.poc_mobile.processed_files.files:type_name -> helium.poc_mobile.file_info
	3,  // 5: helium.poc_mobile.heartbeat.cell_type:type_name -> helium.poc_mobile.cell_type
	0,  // 6: helium.poc_mobile.heartbeat.validity:type_name -> helium.poc_mobile.heartbeat_validity
	1,  // 7: helium.poc_mobile.speedtest_avg.validity:type_name -> helium.poc_mobile.speedtest_avg_validity
	16, // 8: helium.poc_mobile.speedtest_avg.speedtests:type_name -> helium.poc_mobile.speedtest
	4,  // 9: helium.poc_mobile.data_transfer_session_req_v1.radio_access_technology:type_name -> helium.poc_mobile.data_transfer_radio_access_technology
	18, // 10: helium.poc_mobile.data_transfer_session_ingest_report_v1.report:type_name -> helium.poc_mobile.data_transfer_session_req_v1
	5,  // 11: helium.poc_mobile.poc_mobile.submit_speedtest:input_type -> helium.poc_mobile.speedtest_req_v1
	8,  // 12: helium.poc_mobile.poc_mobile.submit_cell_heartbeat:input_type -> helium.poc_mobile.cell_heartbeat_req_v1
	18, // 13: helium.poc_mobile.poc_mobile.submit_data_transfer_session:input_type -> helium.poc_mobile.data_transfer_session_req_v1
	6,  // 14: helium.poc_mobile.poc_mobile.submit_speedtest:output_type -> helium.poc_mobile.speedtest_resp_v1
	9,  // 15: helium.poc_mobile.poc_mobile.submit_cell_heartbeat:output_type -> helium.poc_mobile.cell_heartbeat_resp_v1
	19, // 16: helium.poc_mobile.poc_mobile.submit_data_transfer_session:output_type -> helium.poc_mobile.data_transfer_session_resp_v1
	14, // [14:17] is the sub-list for method output_type
	11, // [11:14] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_service_poc_mobile_proto_init() }
func file_service_poc_mobile_proto_init() {
	if File_service_poc_mobile_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_service_poc_mobile_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeedtestReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeedtestRespV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeedtestIngestReportV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellHeartbeatReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellHeartbeatRespV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellHeartbeatIngestReportV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapperAttachIngestReportV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessedFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Heartbeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeedtestAvg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Speedtest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadioRewardShare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataTransferSessionReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataTransferSessionRespV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataTransferSessionIngestReportV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_poc_mobile_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_poc_mobile_proto_goTypes,
		DependencyIndexes: file_service_poc_mobile_proto_depIdxs,
		EnumInfos:         file_service_poc_mobile_proto_enumTypes,
		MessageInfos:      file_service_poc_mobile_proto_msgTypes,
	}.Build()
	File_service_poc_mobile_proto = out.File
	file_service_poc_mobile_proto_rawDesc = nil
	file_service_poc_mobile_proto_goTypes = nil
	file_service_poc_mobile_proto_depIdxs = nil
}
