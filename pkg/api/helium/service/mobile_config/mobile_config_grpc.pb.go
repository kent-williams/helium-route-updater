// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: service/mobile_config.proto

package mobile_config

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	// Get info for the specified gateway
	Info(ctx context.Context, in *GatewayInfoReqV1, opts ...grpc.CallOption) (*GatewayInfoResV1, error)
	// Get a stream of gateway info
	InfoStream(ctx context.Context, in *GatewayInfoStreamReqV1, opts ...grpc.CallOption) (Gateway_InfoStreamClient, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) Info(ctx context.Context, in *GatewayInfoReqV1, opts ...grpc.CallOption) (*GatewayInfoResV1, error) {
	out := new(GatewayInfoResV1)
	err := c.cc.Invoke(ctx, "/helium.mobile_config.gateway/info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) InfoStream(ctx context.Context, in *GatewayInfoStreamReqV1, opts ...grpc.CallOption) (Gateway_InfoStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gateway_ServiceDesc.Streams[0], "/helium.mobile_config.gateway/info_stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayInfoStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Gateway_InfoStreamClient interface {
	Recv() (*GatewayInfoStreamResV1, error)
	grpc.ClientStream
}

type gatewayInfoStreamClient struct {
	grpc.ClientStream
}

func (x *gatewayInfoStreamClient) Recv() (*GatewayInfoStreamResV1, error) {
	m := new(GatewayInfoStreamResV1)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	// Get info for the specified gateway
	Info(context.Context, *GatewayInfoReqV1) (*GatewayInfoResV1, error)
	// Get a stream of gateway info
	InfoStream(*GatewayInfoStreamReqV1, Gateway_InfoStreamServer) error
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) Info(context.Context, *GatewayInfoReqV1) (*GatewayInfoResV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedGatewayServer) InfoStream(*GatewayInfoStreamReqV1, Gateway_InfoStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method InfoStream not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayInfoReqV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helium.mobile_config.gateway/info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Info(ctx, req.(*GatewayInfoReqV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_InfoStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GatewayInfoStreamReqV1)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayServer).InfoStream(m, &gatewayInfoStreamServer{stream})
}

type Gateway_InfoStreamServer interface {
	Send(*GatewayInfoStreamResV1) error
	grpc.ServerStream
}

type gatewayInfoStreamServer struct {
	grpc.ServerStream
}

func (x *gatewayInfoStreamServer) Send(m *GatewayInfoStreamResV1) error {
	return x.ServerStream.SendMsg(m)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helium.mobile_config.gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "info",
			Handler:    _Gateway_Info_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "info_stream",
			Handler:       _Gateway_InfoStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service/mobile_config.proto",
}

// RouterClient is the client API for Router service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouterClient interface {
	// Verify a given router key with data transfer burn authority is registered
	// returning the requested pubkey binary if present
	Get(ctx context.Context, in *RouterGetReqV1, opts ...grpc.CallOption) (*RouterGetResV1, error)
	// Retrieve a list of all registered router pubkey binaries with burn
	// authority registered to the config service
	List(ctx context.Context, in *RouterListReqV1, opts ...grpc.CallOption) (*RouterListResV1, error)
}

type routerClient struct {
	cc grpc.ClientConnInterface
}

func NewRouterClient(cc grpc.ClientConnInterface) RouterClient {
	return &routerClient{cc}
}

func (c *routerClient) Get(ctx context.Context, in *RouterGetReqV1, opts ...grpc.CallOption) (*RouterGetResV1, error) {
	out := new(RouterGetResV1)
	err := c.cc.Invoke(ctx, "/helium.mobile_config.router/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) List(ctx context.Context, in *RouterListReqV1, opts ...grpc.CallOption) (*RouterListResV1, error) {
	out := new(RouterListResV1)
	err := c.cc.Invoke(ctx, "/helium.mobile_config.router/list", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouterServer is the server API for Router service.
// All implementations must embed UnimplementedRouterServer
// for forward compatibility
type RouterServer interface {
	// Verify a given router key with data transfer burn authority is registered
	// returning the requested pubkey binary if present
	Get(context.Context, *RouterGetReqV1) (*RouterGetResV1, error)
	// Retrieve a list of all registered router pubkey binaries with burn
	// authority registered to the config service
	List(context.Context, *RouterListReqV1) (*RouterListResV1, error)
	mustEmbedUnimplementedRouterServer()
}

// UnimplementedRouterServer must be embedded to have forward compatible implementations.
type UnimplementedRouterServer struct {
}

func (UnimplementedRouterServer) Get(context.Context, *RouterGetReqV1) (*RouterGetResV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRouterServer) List(context.Context, *RouterListReqV1) (*RouterListResV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedRouterServer) mustEmbedUnimplementedRouterServer() {}

// UnsafeRouterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouterServer will
// result in compilation errors.
type UnsafeRouterServer interface {
	mustEmbedUnimplementedRouterServer()
}

func RegisterRouterServer(s grpc.ServiceRegistrar, srv RouterServer) {
	s.RegisterService(&Router_ServiceDesc, srv)
}

func _Router_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouterGetReqV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helium.mobile_config.router/get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).Get(ctx, req.(*RouterGetReqV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouterListReqV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helium.mobile_config.router/list",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).List(ctx, req.(*RouterListReqV1))
	}
	return interceptor(ctx, in, info, handler)
}

// Router_ServiceDesc is the grpc.ServiceDesc for Router service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Router_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helium.mobile_config.router",
	HandlerType: (*RouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get",
			Handler:    _Router_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _Router_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/mobile_config.proto",
}

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	// Authorize a public key for validating trusted rpcs
	AddKey(ctx context.Context, in *AdminAddKeyReqV1, opts ...grpc.CallOption) (*AdminKeyResV1, error)
	// Deauthorize a public key for validating trusted rpcs
	RemoveKey(ctx context.Context, in *AdminRemoveKeyReqV1, opts ...grpc.CallOption) (*AdminKeyResV1, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) AddKey(ctx context.Context, in *AdminAddKeyReqV1, opts ...grpc.CallOption) (*AdminKeyResV1, error) {
	out := new(AdminKeyResV1)
	err := c.cc.Invoke(ctx, "/helium.mobile_config.admin/add_key", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) RemoveKey(ctx context.Context, in *AdminRemoveKeyReqV1, opts ...grpc.CallOption) (*AdminKeyResV1, error) {
	out := new(AdminKeyResV1)
	err := c.cc.Invoke(ctx, "/helium.mobile_config.admin/remove_key", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations must embed UnimplementedAdminServer
// for forward compatibility
type AdminServer interface {
	// Authorize a public key for validating trusted rpcs
	AddKey(context.Context, *AdminAddKeyReqV1) (*AdminKeyResV1, error)
	// Deauthorize a public key for validating trusted rpcs
	RemoveKey(context.Context, *AdminRemoveKeyReqV1) (*AdminKeyResV1, error)
	mustEmbedUnimplementedAdminServer()
}

// UnimplementedAdminServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (UnimplementedAdminServer) AddKey(context.Context, *AdminAddKeyReqV1) (*AdminKeyResV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddKey not implemented")
}
func (UnimplementedAdminServer) RemoveKey(context.Context, *AdminRemoveKeyReqV1) (*AdminKeyResV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveKey not implemented")
}
func (UnimplementedAdminServer) mustEmbedUnimplementedAdminServer() {}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_AddKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminAddKeyReqV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AddKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helium.mobile_config.admin/add_key",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AddKey(ctx, req.(*AdminAddKeyReqV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_RemoveKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminRemoveKeyReqV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).RemoveKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helium.mobile_config.admin/remove_key",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).RemoveKey(ctx, req.(*AdminRemoveKeyReqV1))
	}
	return interceptor(ctx, in, info, handler)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helium.mobile_config.admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add_key",
			Handler:    _Admin_AddKey_Handler,
		},
		{
			MethodName: "remove_key",
			Handler:    _Admin_RemoveKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/mobile_config.proto",
}
